{"version":3,"sources":["assets/employees.js","components/Cards.js","components/Container.js","App.js","serviceWorker.js","index.js"],"names":["employees","firstName","lastName","job","phone","email","id","cards","props","employeeList","list","map","employee","className","key","Container","sortFirstName","sorted","sort","a","b","name1","toUpperCase","name2","comparison","setState","sortLastName","state","type","onClick","this","Cards","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gMAmCeA,EAnCC,CACZ,CACIC,UAAW,SACXC,SAAU,QACVC,IAAK,UACLC,MAAO,gBACPC,MAAO,gBACPC,GAAI,GAER,CACIL,UAAW,UACXC,SAAU,QACVC,IAAK,WACLC,MAAO,gBACPC,MAAO,gBACPC,GAAI,GAER,CACIL,UAAW,QACXC,SAAU,OACVC,IAAK,OACLC,MAAO,gBACPC,MAAO,gBACPC,GAAI,GAER,CACIL,UAAW,OACXC,SAAU,QACVC,IAAK,UACLE,MAAO,gBACPC,GAAI,ICFGC,MA1Bf,SAAeC,GAEV,IAAIC,EAAeD,EAAME,KAAKC,KAAI,SAAAC,GAC/B,OACA,wBAAIC,UAAW,kBAAmBC,IAAKF,EAASN,IAC5C,qCAAYM,EAASX,UAAY,IAAMW,EAASV,UAChD,6BAEA,oCAAWU,EAAST,KACpB,6BAEA,sCAAaS,EAASR,OACtB,6BAEA,sCAAaQ,EAASP,WAK9B,OACI,6BACKI,ICnBQM,E,kDAErB,WAAYP,GAAQ,IAAD,8BAEf,cAAMA,IAONQ,cAAgB,WAiBhB,IAAIC,EAASjB,EAAUkB,MAfnB,SAAiBC,EAAGC,GAChB,IAAMC,EAAQF,EAAElB,UAAUqB,cACpBC,EAAQH,EAAEnB,UAAUqB,cAEtBE,EAAa,EAQjB,OAPIH,EAAQE,EACRC,EAAa,EAENH,EAAQE,IAEfC,GAAc,GAEXA,KAKf,EAAKC,SAAS,CAACf,KAAMO,KA5BN,EA+BfS,aAAe,WAmBX,IAAIT,EAASjB,EAAUkB,MAjBvB,SAAiBC,EAAGC,GAChB,IAAMC,EAAQF,EAAEjB,SAASoB,cACnBC,EAAQH,EAAElB,SAASoB,cAErBE,EAAa,EASjB,OARIH,EAAQE,EACRC,EAAa,EAENH,EAAQE,IAEfC,GAAc,GAGXA,KAMX,EAAKC,SAAS,CAACf,KAAMO,KAhDrB,EAAKU,MAAQ,CACTjB,KAAMV,GALC,E,qDAwDX,OACI,6BACI,yBAAKa,UAAW,aACZ,yBAAKA,UAAU,OACX,yBAAKA,UAAW,sBACZ,6BACI,kDACA,6BACA,6BACI,4BAAQe,KAAK,SAASf,UAAU,0BAA0BgB,QAASC,KAAKd,eAAxE,eACA,4BAAQY,KAAK,SAASf,UAAU,0BAA0BgB,QAASC,KAAKJ,cAAxE,mBAMpB,yBAAKb,UAAW,aACZ,yBAAKA,UAAW,8BACZ,yBAAKA,UAAW,UACZ,wBAAIA,UAAU,cACV,kBAACkB,EAAD,CAAOrB,KAAMoB,KAAKH,MAAMjB,gB,GA9EjBsB,aCKxBC,MANf,WACE,OACE,kBAAC,EAAD,OCLgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCDNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDmHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.c0542ea4.chunk.js","sourcesContent":["let employees = [\r\n    {\r\n        firstName: \"Weston\",\r\n        lastName: \"Meier\",\r\n        job: \"Drummer\",\r\n        phone: \"(555)555-5555\",\r\n        email: \"test@test.com\",\r\n        id: 1\r\n    },\r\n    {\r\n        firstName: \"Richard\",\r\n        lastName: \"Pryor\",\r\n        job: \"Comedian\",\r\n        phone: \"(555)555-5555\",\r\n        email: \"test@test.com\",\r\n        id: 2\r\n    },\r\n    {\r\n        firstName: \"Bobby\",\r\n        lastName: \"flay\",\r\n        job: \"Chef\",\r\n        phone: \"(555)555-5555\",\r\n        email: \"test@test.com\",\r\n        id: 3\r\n    },\r\n    {\r\n        firstName: \"Zeke\", \r\n        lastName: \"Alton\",\r\n        job: \"Painter\",\r\n        email: \"test@test.com\",\r\n        id: 4\r\n    }\r\n\r\n]\r\n\r\nexport default employees;","import React from 'react'\r\n\r\nfunction cards(props) {\r\n    //mapping list of employees and posting to card in list order\r\n     let employeeList = props.list.map(employee => {\r\n        return(\r\n        <li className={\"list-group-item\"} key={employee.id}>\r\n            <h5>Name: { employee.firstName + \" \" + employee.lastName }</h5>\r\n            <hr/>\r\n\r\n            <h6>Job: { employee.job}</h6>\r\n            <hr/>\r\n\r\n            <h6>Phone: { employee.phone}</h6>\r\n            <hr/>\r\n\r\n            <h6>Email: { employee.email}</h6>\r\n        </li>\r\n        )\r\n    });\r\n    // .map results\r\n    return (\r\n        <div>\r\n            {employeeList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default cards;","import React, { Component } from 'react'\nimport employees from \"../assets/employees\";\nimport Cards from \"./Cards\";\n\nexport default class Container extends Component {\n\nconstructor(props) {\n\n    super(props);\n\n        this.state = {\n            list: employees,\n        }\n    }\n    ///Sorting by first name///\n    sortFirstName = () => {\n\n        function compare(a, b) {\n            const name1 = a.firstName.toUpperCase();\n            const name2 = b.firstName.toUpperCase();\n    \n            let comparison = 0;\n            if (name1 > name2) {\n                comparison = 1;\n\n            } else if (name1 < name2) {\n\n                comparison = -1;\n            }\n            return comparison;\n        }\n\n    let sorted = employees.sort(compare);\n\n    this.setState({list: sorted })\n    }\n    ///Sorting by last name///\n    sortLastName = () => {\n\n        function compare(a, b) {\n            const name1 = a.lastName.toUpperCase();\n            const name2 = b.lastName.toUpperCase();\n    \n            let comparison = 0;\n            if (name1 > name2) {\n                comparison = 1;\n\n            } else if (name1 < name2) {\n\n                comparison = -1;\n\n            }\n            return comparison;\n        }\n        \n        // Set the state to the new array\n        let sorted = employees.sort(compare);\n\n        this.setState({list: sorted })\n    }\n\n    render() {\n        return (\n            <div>\n                <div className={\"container\"}>\n                    <div className=\"row\">\n                        <div className={\"col-12 text-center\"}>\n                            <div>\n                                <h1>Sort employees by:</h1>\n                                <hr/>\n                                <div>\n                                    <button type=\"button\" className=\"btn btn-light mr-1 mb-4\" onClick={this.sortFirstName}> First Name</button>\n                                    <button type=\"button\" className=\"btn btn-light mr-1 mb-4\" onClick={this.sortLastName}> Last Name</button>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n                <div className={\"container\"}>\n                    <div className={\"row justify-content-center\"}>\n                        <div className={\"col-12\"}>\n                            <ul className=\"list-group\">\n                                <Cards list={this.state.list} />\n                            </ul>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport Container from \"./components/Container\";\n\nfunction App() {\n  return (\n    <Container />\n  )\n}\n\nexport default App;\n","const isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n  \n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n \n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        \n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        \n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n\n    .register(swUrl)\n\n    .then(registration => {\n      registration.onupdatefound = () => {\n\n        const installingWorker = registration.installing;\n\n        if (installingWorker == null) {\n\n          return;\n        }\n\n        installingWorker.onstatechange = () => {\n\n          if (installingWorker.state === 'installed') {\n\n            if (navigator.serviceWorker.controller) {\n            \n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n\n                config.onUpdate(registration);\n              }\n            } else {\n             \n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n\n    headers: { 'Service-Worker': 'script' },\n    \n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}